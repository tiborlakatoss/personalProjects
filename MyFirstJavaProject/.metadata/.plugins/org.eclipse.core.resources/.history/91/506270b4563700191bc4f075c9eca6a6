package org.example.JavaConventions;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

import org.apache.commons.collections4.CollectionUtils;
import org.example.onlineagendaapp.model.OnlineAgenda;
import org.example.onlineagendaapp.model.Priority;
import org.example.onlineagendaapp.model.Task;

public class JavaConventionsExample {
	private static OnlineAgenda onlineAgenda;
	private static List<Integer> idList = new ArrayList<>();

	public static void main(String[] args) {

		initializeAgenda();
		printAllTasksFromTheAgenda();

		System.out.println("-----------------------------");

		taskToAgenda(LocalDateTime.of(2019, 2, 22, 17, 50), "New task for today", Priority.IMPORTANT);
		taskToAgenda(LocalDateTime.of(2019, 2, 25, 19, 50), "New task for today 2", Priority.IMPORTANT);
		printAllTasksFromTheAgenda();

		System.out.println("-----------------------------");

		tasksfortoday();
	}

	private static void initializeAgenda() {

		onlineAgenda = new OnlineAgenda();
		int id;
		LocalDateTime today = LocalDateTime.now();

		id = getNextRandomId();
		idList.add(id);

		Task yesterdayTask = new Task(id, today.minusDays(1), Priority.URGENT, "Yesterday's Task");

		onlineAgenda.getTasks().add(yesterdayTask);

		id = getNextRandomId();
		idList.add(id);
		Task todayTask = new Task(id, today, Priority.TRIVIAL, "Today's Task");

		onlineAgenda.getTasks().add(todayTask);

		id = getNextRandomId();
		idList.add(id);
		Task tomorrowTask = new Task(id, today.plusDays(1), Priority.IMPORTANT, "Tomorrow's Task");

		onlineAgenda.getTasks().add(tomorrowTask);
	}

	private static void printAllTasksFromTheAgenda() {

		for (Task task : onlineAgenda.getTasks()) {
			System.out.println(task);
		}
	}

	private static void taskToAgenda(LocalDateTime completionDate, String description, Priority priprity) {

		int id = getNextRandomId();
		idList.add(id);
		Task tomorrowTask = new Task(id, completionDate, priprity, description);
		onlineAgenda.getTasks().add(tomorrowTask);
	}

	private static void deleteTaskFromAgenda(int id) {

		Iterator<Task> iterator = onlineAgenda.getTasks().iterator();

		while (iterator.hasNext()) {
			if (iterator.next().getId() == id) {
				iterator.remove();

				return;

			}
		}
	}

	private static void updateTaskPriority(int id, Priority newPriority) {

		for (Task task : onlineAgenda.getTasks()) {
			if (task.getId() == id) {
				task.setPriority(newPriority);

				return;
			}
		}
	}

	private static int getNextRandomId() {

		Random random = new Random();
		return random.nextInt(100);
	}

	private static void tasksfortoday() {

		List<Task> list1 = new ArrayList<>();
		List<Task> list2 = new ArrayList<>();
		List<Task> list3 = new ArrayList<>();

		for (Task task : onlineAgenda.getTasks()) {
			if (LocalDate.now().isEqual(task.getTargetCompletionDate().toLocalDate())) {
				switch (task.getPriority()) {

				case URGENT:
					list1.add(task);

					break;

				case IMPORTANT:
					list2.add(task);

					break;

				case TRIVIAL:
					list3.add(task);

					break;
				}
			}
		}
		Collections.sort(list1, new Comparator<Task>() {

			@Override
			public int compare(Task o1, Task o2) {
				if (o1.getTargetCompletionDate() == null && o2.getTargetCompletionDate() != null) {
					return -1;
				}
				return o1.getTargetCompletionDate().compareTo(o2.getTargetCompletionDate());
			}
		});
		Collections.sort(list2, new Comparator<Task>() {

			@Override
			public int compare(Task o1, Task o2) {
				if (o1.getTargetCompletionDate() == null && o2.getTargetCompletionDate() != null) {
					return -1;
				}
				return o1.getTargetCompletionDate().compareTo(o2.getTargetCompletionDate());
			}
		});
		Collections.sort(list3, new Comparator<Task>() {

			@Override
			public int compare(Task o1, Task o2) {
				if (o1.getTargetCompletionDate() == null && o2.getTargetCompletionDate() != null) {
					return -1;
				}
				return o1.getTargetCompletionDate().compareTo(o2.getTargetCompletionDate());
			}
		});
		System.out.println("URGENT tasks for today:");
		if (CollectionUtils.isEmpty(list1)) {
			System.out.println("You have no URGENT tasks");
		} else {
			for (Task task : list1) {
				System.out.println(task.toString());
			}
		}
		System.out.println("-----------------------------");
		System.out.println("IMPORTANT tasks for today:");

		if (CollectionUtils.isEmpty(list2)) {
			System.out.println("You have no IMPORTANT tasks");
		}

		else {
			for (Task task : list2) {
				System.out.println(task.toString());
			}
		}
		System.out.println("-----------------------------");
		System.out.println("TRIVIAL tasks for today:");

		if (CollectionUtils.isEmpty(list3)) {
			System.out.println("You have no TRIVIAL tasks");
		} else {
			for (Task task : list3) {
				System.out.println(task.toString());
			}
		}

	}

}
